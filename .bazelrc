# Enable Bzlmod so we can start using this new to 6.0 feature as it's the path
# forward for Bazel
common --enable_bzlmod

# Error if our bzlmod lockfile doesn't match what we're getting from the registry
# TODO: Change this to error once we're not regularly updating the modules
common --lockfile_mode update

# Change our defaults to build optimized binaries rather than focusing on
# building fast.
#
# This repository mostly focuses on code that doesn't need to be compiled, like
# Python code, and the compiled code we do have is things that change rarely.
# This means that our compilation speed doesn't really affect our dev loop much,
# and defaulting to our "production" settings will make dev and prod match more
# closely.
build --compilation_mode opt

# We want to build targeting x86-64-v2 rather than the default of x86-64(-v1).
#
# This mostly just controls what CPU features the compiled code can take
# advantage of. The default of x86-64-v1 means that no additional features can
# be used that aren't part of the original x86-64 spec.
#
# x86-64-v2 unlocks things like SSE3 and SSE4, and supports CPUs produced back
# to 2009.
#
# For more levels, check out https://en.wikipedia.org/wiki/X86-64#Microarchitecture_levels
build --copt=-march=x86_64_v2

# Ensure that tags applied in your BUILD file, like tags = ["no-remote"] get
# propagated to actions created by the rule. Without this option, you rely on
# rules authors to manually check the tags you passed and apply relevant ones to
# the actions they create.
common --incompatible_allow_tags_propagation

# Don't make the user wait for uploads, instead allow the bazel command to
# complete and exit.
build --bes_upload_mode=fully_async

# Tell bazel not to try and detect the C/C++ toolchain from the host, instead it
# will do nothing by default, which will allow us to register our own, hermetic
# toolchain.
build --incompatible_enable_cc_toolchain_resolution
build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Reduce clutter by putting all of our bazel symlinks inside of a .bazel directory
build --symlink_prefix=.bazel/

# Ensure that we don't accidentally make non-hermetic actions/tests which
# depend on remote services. Tag an individual target with tags=["requires-network"]
# to opt-out of the enforcement.
build --sandbox_default_allow_network=false

# Save time on Sandbox creation and deletion when many of the same kind of
# action run during the build.
build --experimental_reuse_sandbox_directories

# Don't let environment variables like $PATH sneak into the build, which can
# cause massive cache misses when they change.
build --incompatible_strict_action_env

# Some actions are always IO-intensive but require little compute. It's wasteful
# to put the output in the remote cache, it just saturates the network and fills
# the cache storage causing earlier evictions. It's also not worth sending them
# for remote execution. For actions like PackageTar it's faster to just re-run
# the work locally every time. We'll have to look at an execution log to figure
# out which action mnemonics we care about.
build --modify_execution_info=PackageTar=+no-remote

# improve performance of sandbox by skipping the older my_repo/external/other_repo
# symlinks.
# NOTE: Some rules may fail under this flag.
build --nolegacy_external_runfiles

# Speed up all builds by not checking if output files have been modified. Also
# lets you hack around the output tree for local debugging.
build --noexperimental_check_output_files --noexperimental_check_external_repository_files

# Fix the wrong default that comes from Google's internal monorepo by using __init__.py
# to delimit a Python package
build --incompatible_default_to_explicit_init_py

# Improve remote cache checking speed by memorizing merkle tree calculations,
# and tweak the amount of memory allocated to it
# build --experimental_remote_merkle_tree_cache --experimental_remote_merkle_tree_cache_size=[XX]

# Download the minimal amount of cached objects needed to complete the build.
# This may result in errors if our cache ever evicts stuff in the middle of a
# build.
# NOTE: Breaks bzl run @python//:interpreter
# build --remote_download_minimal

# If the grpc remote cache connection fails, it will fail the build, add this so
# it falls back to the local cache.
build --remote_local_fallback

# Don't upload artifacts referenced in the BEP if the action can't be cached remotely.
build --experimental_remote_build_event_upload=minimal

# Compress cache blobs with zstd
build --experimental_remote_cache_compression

# Reduce the payload size of the uploaded build event stream by eliminating
# duplicate file references.
build --nolegacy_important_outputs

# Provide more detailed timing profiles
build --noslim_profile
build --experimental_profile_include_target_label
build --experimental_profile_include_primary_output

# Fix a bug where Bazel didn't enable sandboxing for tests with tags=["exclusive"]
test --incompatible_exclusive_test_sandboxed

# Bazel's default for test_timeout is medium (5 min), but most tests should
# instead be short (1 min)
test --test_verbose_timeout_warnings

# Change the behavior of bazel test to not bother building targets which aren't
# dependencies of the tests.
test --build_tests_only

# Ensure that the Bazel server notices when a directory changes, if you have a
# directory listed in the srcs of some target.
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

# Allow developers to add repo-specific overrides in their own personal
# .bazelrc.user file.
# NOTE: Must be the last line
try-import %workspace%/.user.bazelrc
